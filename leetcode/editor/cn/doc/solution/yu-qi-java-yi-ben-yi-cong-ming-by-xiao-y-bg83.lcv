> 笨方法 二次遍历

* 

```
class Solution {
    public int removeDuplicates(int[] nums) {
        // 思路 遍历，记录重复数区间
        if (nums.length == 0) {
            return 0;
        }
        int count = 0;
        int i = 0;
        int j = 0;
        while (i < nums.length) {
            j = i + 1;
            while (j < nums.length && nums[j] == nums[i]) {
                nums[j] = Integer.MAX_VALUE;
                ++j;
            }
            i = j;
        }

        int index = 1;
        for (i = 1; i < nums.length; i++) {
            if (nums[i] != Integer.MAX_VALUE) {
                nums[index++] = nums[i];
            }
        }

        return index;
    }
}
```

> 聪明法子，边找将数字归位

* 

```
class Solution {
    public int removeDuplicates(int[] nums) {
        // 思路 遍历，记录重复数区间
        if (nums.length == 0) {
            return 0;
        }

        int index = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                nums[index++] = nums[i];
            }
        }
        
        return index;
    }
}
```

